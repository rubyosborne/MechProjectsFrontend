{"ast":null,"code":"(function (root, globalName, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD:\n    define([], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // Node:\n    module.exports = factory(); // Use module export as simulated ES6 default export:\n\n    module.exports.default = module.exports;\n  } else {\n    // Browser:\n    window[globalName] = factory();\n  }\n})(this, 'b64toBlob', function () {\n  'use strict';\n\n  return function b64toBlob(b64Data, contentType, sliceSize) {\n    contentType = contentType || '';\n    sliceSize = sliceSize || 512;\n    var byteCharacters = atob(b64Data);\n    var byteArrays = [];\n\n    for (var offset = 0; offset < byteCharacters.length; offset += sliceSize) {\n      var slice = byteCharacters.slice(offset, offset + sliceSize);\n      var byteNumbers = new Array(slice.length);\n\n      for (var i = 0; i < slice.length; i++) {\n        byteNumbers[i] = slice.charCodeAt(i);\n      }\n\n      var byteArray = new Uint8Array(byteNumbers);\n      byteArrays.push(byteArray);\n    }\n\n    var blob = new Blob(byteArrays, {\n      type: contentType\n    });\n    return blob;\n  };\n});","map":{"version":3,"sources":["/Users/rubyosborne/forreal/client/node_modules/b64-to-blob/b64toBlob.js"],"names":["root","globalName","factory","define","amd","module","exports","default","window","b64toBlob","b64Data","contentType","sliceSize","byteCharacters","atob","byteArrays","offset","length","slice","byteNumbers","Array","i","charCodeAt","byteArray","Uint8Array","push","blob","Blob","type"],"mappings":"AAAC,WAASA,IAAT,EAAeC,UAAf,EAA2BC,OAA3B,EAAoC;AACnC,MAAI,OAAOC,MAAP,KAAkB,UAAlB,IAAgCA,MAAM,CAACC,GAA3C,EAAgD;AAC9C;AACAD,IAAAA,MAAM,CAAC,EAAD,EAAKD,OAAL,CAAN;AACD,GAHD,MAGO,IAAI,OAAOG,MAAP,KAAkB,QAAlB,IAA8BA,MAAM,CAACC,OAAzC,EAAkD;AACvD;AACAD,IAAAA,MAAM,CAACC,OAAP,GAAiBJ,OAAO,EAAxB,CAFuD,CAGvD;;AACAG,IAAAA,MAAM,CAACC,OAAP,CAAeC,OAAf,GAAyBF,MAAM,CAACC,OAAhC;AACD,GALM,MAKA;AACL;AACAE,IAAAA,MAAM,CAACP,UAAD,CAAN,GAAqBC,OAAO,EAA5B;AACD;AACF,CAbA,EAaC,IAbD,EAaO,WAbP,EAaoB,YAAW;AAC9B;;AAEA,SAAO,SAASO,SAAT,CAAmBC,OAAnB,EAA4BC,WAA5B,EAAyCC,SAAzC,EAAoD;AACzDD,IAAAA,WAAW,GAAGA,WAAW,IAAI,EAA7B;AACAC,IAAAA,SAAS,GAAGA,SAAS,IAAI,GAAzB;AAEA,QAAIC,cAAc,GAAGC,IAAI,CAACJ,OAAD,CAAzB;AACA,QAAIK,UAAU,GAAG,EAAjB;;AAEA,SAAK,IAAIC,MAAM,GAAG,CAAlB,EAAqBA,MAAM,GAAGH,cAAc,CAACI,MAA7C,EAAqDD,MAAM,IAAIJ,SAA/D,EAA0E;AACxE,UAAIM,KAAK,GAAGL,cAAc,CAACK,KAAf,CAAqBF,MAArB,EAA6BA,MAAM,GAAGJ,SAAtC,CAAZ;AAEA,UAAIO,WAAW,GAAG,IAAIC,KAAJ,CAAUF,KAAK,CAACD,MAAhB,CAAlB;;AACA,WAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,KAAK,CAACD,MAA1B,EAAkCI,CAAC,EAAnC,EAAuC;AACrCF,QAAAA,WAAW,CAACE,CAAD,CAAX,GAAiBH,KAAK,CAACI,UAAN,CAAiBD,CAAjB,CAAjB;AACD;;AAED,UAAIE,SAAS,GAAG,IAAIC,UAAJ,CAAeL,WAAf,CAAhB;AAEAJ,MAAAA,UAAU,CAACU,IAAX,CAAgBF,SAAhB;AACD;;AAED,QAAIG,IAAI,GAAG,IAAIC,IAAJ,CAASZ,UAAT,EAAqB;AAACa,MAAAA,IAAI,EAAEjB;AAAP,KAArB,CAAX;AACA,WAAOe,IAAP;AACD,GAtBD;AAuBD,CAvCA,CAAD","sourcesContent":["(function(root, globalName, factory) {\r\n  if (typeof define === 'function' && define.amd) {\r\n    // AMD:\r\n    define([], factory);\r\n  } else if (typeof module === 'object' && module.exports) {\r\n    // Node:\r\n    module.exports = factory();\r\n    // Use module export as simulated ES6 default export:\r\n    module.exports.default = module.exports;\r\n  } else {\r\n    // Browser:\r\n    window[globalName] = factory();\r\n  }\r\n}(this, 'b64toBlob', function() {\r\n  'use strict';\r\n\r\n  return function b64toBlob(b64Data, contentType, sliceSize) {\r\n    contentType = contentType || '';\r\n    sliceSize = sliceSize || 512;\r\n\r\n    var byteCharacters = atob(b64Data);\r\n    var byteArrays = [];\r\n\r\n    for (var offset = 0; offset < byteCharacters.length; offset += sliceSize) {\r\n      var slice = byteCharacters.slice(offset, offset + sliceSize);\r\n\r\n      var byteNumbers = new Array(slice.length);\r\n      for (var i = 0; i < slice.length; i++) {\r\n        byteNumbers[i] = slice.charCodeAt(i);\r\n      }\r\n  \r\n      var byteArray = new Uint8Array(byteNumbers);\r\n  \r\n      byteArrays.push(byteArray);\r\n    }\r\n  \r\n    var blob = new Blob(byteArrays, {type: contentType});\r\n    return blob;\r\n  };\r\n}));\r\n"]},"metadata":{},"sourceType":"script"}